# Historical Timeseries backened processing of LIS ATLAS Output for Central Asia Region
# Input is NETCDF Format dataset from NCCS Portal
# This script is used to calculate mean of SWE of the specified basins in centralasiabasin.txt
# Input: Extracted ESRI ASCII file from the NETCDF file, Selected ID of the basin in centralasiabasin.txt and Basin Gid File, centralasiabasinindex.txt
# Scripts written by Nishan Kumar Biswas
# Phd Student and Graduate Research Assistant
# Dept of Civil and Environmental Engineering, University of washington
# email: nbiswas@uw.edu, nishan.wre.buet@gmail.com
## Special Note: This script is valid for NETCDF Version 4 (not for NETCDF Classic Datasets) with spatial georeference only

# Reading date.info generated by the Bash script to define date
datefile=open('date.info', 'r')
# defining date of processing from date.info
seldate = datefile.read()[:-1]
# defining region from region.info file
metadata=open('region.info', 'r')
region = metadata.read()[:-1]

#Reading Selected Basin specified in centralasiabasin.txt File
selbasinpath= region + 'basin.txt'
basinfile = open(selbasinpath, 'r')
lines = basinfile.readlines()
selbasins=[]
for x in xrange(len(lines)):
        line = lines[x].split()
        selbasins.append(int(line[0]))


#Reading Basin Extent File pregenerated to define the subbasin of each of the grid in NETCDF File
basingridpath= region + 'basinindex.asc'
basinfile = open(basingridpath, 'r')
lines = basinfile.readlines()
line = lines[0].split()
ncols = int(line[1])
line = lines[1].split()
nrows = int(line[1])
basinid = []
for x in range(0, nrows):
        line = lines[x+6].split()
        for y in range(0, ncols):
                basinid.append(int(line[y]))

#Reading SWE ESRI ASCII File extracted by using bash script 
rainfilepath= region + '_swe_' + seldate +'.asc'
rainfile = open(rainfilepath, 'r')
lines = rainfile.readlines()
rainf = []
for x in range(0, nrows):
        line = lines[x+6].split()
        for y in range(0, ncols):
                rainf.append(float(line[y]))
                
# Comparing selected basins, basin index file and SWE ESRI ASCII file to get the average of the datasets
strContent = ""
basinIDs = []
meanbasins = []
# Looping over the selected basins
for i in xrange(len(selbasins)):
    sumparam = 0
    cntparam = 0
    avgparam = 0
    # Looping over the grids of the basin grid file to select the cells included in a particular sub basin 
    for j in xrange(len(basinid)):
        if selbasins[i]==basinid[j] and rainf[j]!=-9999.0:
            sumparam = sumparam + rainf[j]
            cntparam = cntparam + 1
    avgparam = sumparam/float(cntparam)
    basinIDs.append(selbasins[i])
    meanbasins.append(avgparam)
# Writing outputs inthe timeseries files
for j in xrange(len(meanbasins)):
    with open('SWE/' + region + '_swe_' + str(selbasins[j]) +'.txt', 'a') as text:
        text.write(seldate + ',' + str(meanbasins[j]) + '\n')


